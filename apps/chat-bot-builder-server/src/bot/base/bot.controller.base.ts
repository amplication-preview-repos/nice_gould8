/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BotService } from "../bot.service";
import { BotCreateInput } from "./BotCreateInput";
import { Bot } from "./Bot";
import { BotFindManyArgs } from "./BotFindManyArgs";
import { BotWhereUniqueInput } from "./BotWhereUniqueInput";
import { BotUpdateInput } from "./BotUpdateInput";
import { ConversationFindManyArgs } from "../../conversation/base/ConversationFindManyArgs";
import { Conversation } from "../../conversation/base/Conversation";
import { ConversationWhereUniqueInput } from "../../conversation/base/ConversationWhereUniqueInput";

export class BotControllerBase {
  constructor(protected readonly service: BotService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Bot })
  async createBot(@common.Body() data: BotCreateInput): Promise<Bot> {
    return await this.service.createBot({
      data: {
        ...data,

        account: data.account
          ? {
              connect: data.account,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        account: {
          select: {
            id: true,
          },
        },

        configuration: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Bot] })
  @ApiNestedQuery(BotFindManyArgs)
  async bots(@common.Req() request: Request): Promise<Bot[]> {
    const args = plainToClass(BotFindManyArgs, request.query);
    return this.service.bots({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        account: {
          select: {
            id: true,
          },
        },

        configuration: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Bot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bot(@common.Param() params: BotWhereUniqueInput): Promise<Bot | null> {
    const result = await this.service.bot({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        account: {
          select: {
            id: true,
          },
        },

        configuration: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Bot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBot(
    @common.Param() params: BotWhereUniqueInput,
    @common.Body() data: BotUpdateInput
  ): Promise<Bot | null> {
    try {
      return await this.service.updateBot({
        where: params,
        data: {
          ...data,

          account: data.account
            ? {
                connect: data.account,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,

          account: {
            select: {
              id: true,
            },
          },

          configuration: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Bot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBot(
    @common.Param() params: BotWhereUniqueInput
  ): Promise<Bot | null> {
    try {
      return await this.service.deleteBot({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,

          account: {
            select: {
              id: true,
            },
          },

          configuration: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/conversations")
  @ApiNestedQuery(ConversationFindManyArgs)
  async findConversations(
    @common.Req() request: Request,
    @common.Param() params: BotWhereUniqueInput
  ): Promise<Conversation[]> {
    const query = plainToClass(ConversationFindManyArgs, request.query);
    const results = await this.service.findConversations(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        endedAt: true,
        startedAt: true,

        bot: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/conversations")
  async connectConversations(
    @common.Param() params: BotWhereUniqueInput,
    @common.Body() body: ConversationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      conversations: {
        connect: body,
      },
    };
    await this.service.updateBot({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/conversations")
  async updateConversations(
    @common.Param() params: BotWhereUniqueInput,
    @common.Body() body: ConversationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      conversations: {
        set: body,
      },
    };
    await this.service.updateBot({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/conversations")
  async disconnectConversations(
    @common.Param() params: BotWhereUniqueInput,
    @common.Body() body: ConversationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      conversations: {
        disconnect: body,
      },
    };
    await this.service.updateBot({
      where: params,
      data,
      select: { id: true },
    });
  }
}
